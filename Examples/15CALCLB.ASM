;=============================================================================
;                 Задание # 15. Файл 15calclb.asm
; Библиотека процедур для рисования рамок, ввода/вывода строк и пр.
; Copyright (c) 2001 Andreev Andrey aka Android or bgCOD (BgD)
;=============================================================================

;=============================================================================
;               Процедура ввода строки чисел посимвольно
;-----------------------------------------------------------------------------
; assumes :     es = 0b800h, cld.
; entry :       di - start address,
;               bx и dx - адреса x1 и x2 координат поля ввода.
; exit :        ax - введённое число.
; destr :       di, bx, cx, dx.
;=============================================================================
input_symb      proc

next:           mov ah, 00h
                int 16h
                cmp al, 0dh     ; завершение ввода Enter'ом
                je mov_ax_vmem

                cmp al, 08h     ; Backspace
                je backspace

                cmp al, '0'     ; Запрет на ввод недопустимых значений
                jl next
                cmp al, '9'
                ja next

                cmp di, dx      ; запрет на ввод при
                je next         ; переполнении поля

                mov ah, color
                stosw
                jmp next

backspace:      cmp di, bx
                je next

                sub di, 2d
                mov al, 00h
                mov ah, color
                stosw
                sub di, 2

                jmp next

mov_ax_vmem:    mov ax, 00h
                mov di, bx
                mov cx, 10d
next_read:      mov bx, es:[di]
                add di, 2
                cmp bl, 00h
                je done_input
                mul cx
                sub bl, '0'
                mov bh, 00h
                add ax, bx
                jmp next_read

done_input:     ret
                endp
;=============================================================================
;               Конец процедуры ввода строки
;=============================================================================

;<=#########################################################################=>

;=============================================================================
; Процедуры рисования рамки с координатами x1 = al; x2 = ah; y1 = dl; y2 = dh
;=============================================================================

; ╔════════════════════════════ Константы ════════════════════════════╗
;------------------------------------------------------------------------
probel          = 00h         ; символ, которым заполняется прямоугольник

left_up         = 0c9h         ; ╔             символы рамки          -->
hor_line        = 0cdh         ; ═
right_up        = 0bbh         ; ╗
ver_line        = 0bah         ; ║
right_down      = 0bch         ; ╝
left_down       = 0c8h         ; ╚             символы рамки          <--
;------------------------------------------------------------------------
; ╚════════════════════════════ Константы ════════════════════════════╝

;=============================================================================
;               Главная процедура
;-----------------------------------------------------------------------------
; assumes :     es = 0b800h, cld.
; entry :       bl = x1, bh = x2, dl = y1, dh = y2.
; destr :       ax, di.
;=============================================================================
draw_frame      proc

                call address_x1_y1      ; вычисление di = (dl*80+bl)*2
; Первый символ - левый верхний угол рамки
                mov ah, color
                mov al, left_up
                stosw
; Цикл вывода верхней линии рамки
                call delta_x
                mov al, hor_line
                rep stosw
; Правый верхний угол рамки
                mov al, right_up
                stosw
; Вывод вертикальных линий рамки
                call new_line
; Вывод последней сточки
                mov al, left_down
                stosw
                call delta_x
                mov al, hor_line
                rep stosw
                mov al, right_down
                stosw

                ret
                endp
;=============================================================================
; Процедура вычисления адреса координаты (x1; y1) по ф-ле  (y1*80+x1)*2
;-----------------------------------------------------------------------------
; entry :       dl = y1; bl = x1;
; exit :        di = (y1 * 80 + x1) * 2
; destr :       ax, di.
;=============================================================================
address_x1_y1   proc

                mov ah, 80d
                mov al, dl
                mul ah          ; ax = y1 * 80
                add al, bl      ; ax = y1 * 80 + x1
                shl ax, 1d      ; ax = (y1 * 80 + x1) * 2
                mov di, ax

                ret
                endp
;=============================================================================
; Процедура вычисления cx = x2 - x1.
;-----------------------------------------------------------------------------
; entry :       bl = x1; bh = x2;
; exit :        cx = bh - bl
; destr :       none.
;=============================================================================
delta_x         proc

                mov cl, bh
                sub cl, bl
                sub cl, 1d

                ret
                endp
;=============================================================================
; Процедура рисования линии типа '║               ║'
;-----------------------------------------------------------------------------
; entry :       di - текущий адрес
; assumes :     cld, ah - color
; exit :        di = di + 79*2 - x2 - x1
;=============================================================================
new_line        proc

                mov al, ver_line

                xchg bx, dx
                call delta_x
                xchg bx, dx
                push dx
; вычесление того, что надо добавить к di для перевода строки
                mov dx, 79d
                sub dl, bh
                add dl, bl
                shl dx, 1d

; цикл вывода строк "║       ║"
new_line_next:  add di, dx      ; перевод строки (  di = di+(79-x2+x1)*2  )
                stosw
                push cx
                call delta_x
                mov al, probel
                rep stosw
                pop cx
                mov al, ver_line
                stosw
                loop new_line_next

                add di, dx
                pop dx
                ret
                endp
;=============================================================================
; Конец блока процедур рисования рамки
;=============================================================================

;<=#########################################################################=>

;=============================================================================
;               Процедура вывода надписи
;-----------------------------------------------------------------------------
; entry:        si - string address, di - start address
; assumes:      es = b800h, cld.
; exit:         none.
; destr:        ax, di.
;=============================================================================
print_str       proc
                mov ah, color
again:          lodsb
                cmp al, '$'
                je done_print
                stosw
                jmp again

done_print:     ret
                endp
;=============================================================================
;               Конец процедуры вывода надписи
;=============================================================================

;<=#########################################################################=>

;=============================================================================
;               Процедура вывода содержимого рега ax
;-----------------------------------------------------------------------------
; entry :       dl - то, на что делим, di - start address.
; assumes :     es = 0b800, std
; destr   :     di, ax, dx.
;=============================================================================
show_ax         proc

again_div:      div dl          ; деление
                cmp ah, 10d
                jl first_sym    ; ah < 10
                jae second_sym  ; ah >= 10

next_out_ax:    mov dh, al      ; запоминание частного
                xchg ah, al     ; поменять местами частное и остаток
                mov ah, color   ; цвет вывода
                stosw           ; вывод символа
                mov al, dh      ; восстановление частного
                mov ah, 0       ; обнуление остатка
                cmp al, 0       ; если частное - нуль, то цикл НЕ повторяется
                jne again_div

                jmp end_ax

first_sym:      add ah, '0'
                jmp next_out_ax

second_sym:     add ah, 'A' - 10
                jmp next_out_ax

end_ax:         ret
                endp
;=============================================================================
; Конец процедуры вывода содержимого рега ax
;=============================================================================