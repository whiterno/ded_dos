Turbo Assembler	 Version 4.1	    02/24/25 23:36:34	    Page 1
resident.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .186
      4				     locals @@
      5				     org 100h
      6
      7	      =0021		     HOT_KEY	     equ     33
      8	      =B800		     VIDEOSEG	     equ     0b800h
      9	      =000C		     REG_AMOUNT	 equ 12
     10
     11				     ;-----------------------------------------------------------------------------
     12				     ;Changes DI address to the	beginning of the next line of frame
     13				     ;Entry: DI	- address pointer
     14				     ;	     DX	- line width
     15				     ;Exit:  DI	- address of the beginning of the next line of frame
     16				     ;Destr: DI
     17				     ;-----------------------------------------------------------------------------
     18				     SHIFT_TO_NEXT_LINE	macro
     19						     sub di, dx		     ; shift in	line
     20						     sub di, dx		     ; di = di - 2*dx
     21						     add di, 160	     ; jump on the next	line
     22				     endm
     23
     24	0100			     Start:
     25
     26	0100  E9 0227			     jmp Load
     27
     28	0103  00		     ActivateFlag    db	0
     29	0104  00000000		     Old08Handler    dd	0
     30	0108  00000000		     Old09Handler    dd	0
     31
     32	010C  C9 CD BB BA 20 BA	C8+  Style	     db	201d, 205d, 187d, 186d,	32d, 186d, 200d, 205d, 188d
     33	      CD BC
     34	0115  0000		     X_coord	     dw	0
     35	0117  0000		     Y_coord	     dw	0
     36	0119  41 58 20 30 30 30	30+  RegValues	 db "AX	0000 BX	0000 CX	0000 DX	0000 SI	0000 DI	0000 BP	0000 SP	0000 DS	0000 CS	0000+
     37	      20 42 58 20 30 30	30+  ES	0000 SS	0000"
     38	      30 20 43 58 20 30	30+
     39	      30 30 20 44 58 20	30+
     40	      30 30 30 20 53 49	20+
     41	      30 30 30 30 20 44	49+
     42	      20 30 30 30 30 20	42+
     43	      50 20 30 30 30 30	20+
     44	      53 50 20 30 30 30	30+
     45	      20 44 53 20 30 30	30+
     46	      30 20 43 53 20 30	30+
     47	      30 30 20 45 53 20	30+
     48	      30 30 30 20 53 53	20+
     49	      30 30 30 30
     50
     51				     ;----------------------------------------------------------------------------
     52				     ; New 09h interrupt, checks combination CTRL-F and	if pushed makes	xor 1 to
     53				     ; ActivateFlag
     54				     ;----------------------------------------------------------------------------
     55	0178			     checkKeys	     proc
     56	0178  9C			     pushf
     57	0179  2E: FF 1E	0108r		     call cs:Old09Handler
Turbo Assembler	 Version 4.1	    02/24/25 23:36:34	    Page 2
resident.asm



     58
     59	017E  50 53 51 52 57 56	1E+	     push ax bx	cx dx di si ds es
     60	      06
     61
     62	0186  B4 02			     mov ah, 02h
     63	0188  CD 16			     int 16h
     64
     65	018A  3C 04			     cmp al, 04h	     ; check if	ctrl is	pushed
     66	018C  75 21			     jne cs:SkipActivate
     67
     68	018E  E4 60			     in	al, 60h
     69
     70	0190  3C 21			     cmp al, HOT_KEY		     ; compare al and 33(F scancode)
     71	0192  75 1B			     jne cs:SkipActivate
     72
     73	0194  2E: 80 36	0103r 01	     xor cs:ActivateFlag, 00000001b	     ; ActivateFlag xor	1
     74
     75					 ; TODO: make 33h
     76	019A  B8 0003			     mov ax, 03h
     77	019D  CD 33			     int 33h
     78
     79	019F  C1 E9 03			     shr cx, 3
     80	01A2  C1 EA 03			     shr dx, 3
     81
     82	01A5  2E: 89 0E	0115r		     mov cs:X_coord, cx
     83	01AA  2E: 89 16	0117r		     mov cs:Y_coord, dx
     84					 ; TODO: make 33h
     85
     86	01AF			     SkipActivate:
     87
     88	01AF  07 1F 5E 5F 5A 59	5B+	     pop es ds si di dx	cx bx ax	     ; return all registers
     89	      58
     90
     91	01B7  CF			     iret
     92	01B8				     endp
     93
     94				     ;-----------------------------------------------------------------------------
     95				     ; If ActivateFlag is 1 - draws a frame with real time registers' values
     96				     ; every tick, then	returns	to old 08h handler
     97				     ; If ActivateFlag is 0 - returns to old 08h handler
     98				     ;-----------------------------------------------------------------------------
     99	01B8			     draw	     proc
    100	01B8  53 16 06 0E 1E 54	55+	     push bx ss	es cs ds sp bp di si dx	cx bx ax
    101	      57 56 52 51 53 50
    102
    103	01C5  0E			     push cs
    104	01C6  1F			     pop ds
    105
    106	01C7  2E: 80 3E	0103r 00	     cmp cs:ActivateFlag, 0
    107	01CD  74 31			     je	cs:SkipDraw
    108
    109	01CF  2E: 8B 3E	0117r		 mov di, cs:Y_coord		 ; y coord of the left-top corner of frame
    110	01D4  2E: 8B 16	0115r		 mov dx, cs:X_coord	     ; x coord
    111	01D9  E8 0036 90 90		     call cs:firstCharAddr
    112
    113	01DE  B8 B800			     mov ax, VIDEOSEG	     ; set videosegment	address
    114	01E1  8E C0			     mov es, ax		     ; in es
Turbo Assembler	 Version 4.1	    02/24/25 23:36:34	    Page 3
resident.asm



    115
    116	01E3  B4 07			     mov ah, 00000111b	     ; black back, red front
    117	01E5  BB 0010			     mov bx, REG_AMOUNT	+ 4  ; set frame height
    118	01E8  BA 000B			     mov dx, 11		     ; set frame width
    119	01EB  BE 010Cr			     mov si, offset cs:Style	    ; set frame	style
    120
    121	01EE  E8 003B 90 90		     call cs:drawFrame
    122
    123	01F3  BE 0119r			 mov si, offset	cs:RegValues
    124	01F6  E8 0066 90 90		 call cs:writeAllReg
    125
    126	01FB  E8 00FA 90 90		 call cs:screenReg
    127
    128	0200			     SkipDraw:
    129
    130	0200  58 5B 59 5A 5E 5F	5D+	 pop ax	bx cx dx si di bp bx ds	bx es bx bx
    131	      5B 1F 5B 07 5B 5B
    132
    133	020D  2E: FF 2E	0104r		     jmp cs:Old08Handler
    134
    135	0212				     endp
    136
    137				     ;-----------------------------------------------------------------------------
    138				     ;Counts memory address of the character on	x and y	coords in videosegment
    139				     ;Entry: DX	- x coord
    140				     ;	     DI	- y coord
    141				     ;Exit:  DI	- memory adress	of the character
    142				     ;Destr: DI, AX
    143				     ;-----------------------------------------------------------------------------
    144	0212			     firstCharAddr   proc
    145
    146	0212  8B C7			     mov ax, di			     ;
    147	0214  C1 E7 06			     shl di, 6			     ;
    148	0217  C1 E0 04			     shl ax, 4			     ; count memory adress
    149	021A  03 F8			     add di, ax			     ;
    150	021C  03 FA			     add di, dx			     ;
    151	021E  D1 E7			     shl di, 1			     ;
    152
    153	0220  C3			     ret
    154	0221				     endp
    155
    156				     ;-----------------------------------------------------------------------------
    157				     ;Draws a line of characters in 3 byte string (122..223)
    158				     ;Entry: DI	- memory address of the	1st character in videosegment
    159				     ;	     SI	- memory address of 3 byte string
    160				     ;	     AH	- color	attribute
    161				     ;	     CX	- line width
    162				     ;Exit:  None
    163				     ;Destr: DI, SI, CX, AL
    164				     ;-----------------------------------------------------------------------------
    165	0221			     drawLine	     proc
    166
    167	0221  AC			     lodsb			     ; draw 1st	character
    168	0222  AB			     stosw			     ;
    169
    170	0223  83 E9 02			     sub cx, 2			     ;
    171	0226  AC			     lodsb			     ; draw middle part	(2nd chars)
Turbo Assembler	 Version 4.1	    02/24/25 23:36:34	    Page 4
resident.asm



    172	0227  F3> AB			     rep stosw			     ;
    173
    174	0229  AC			     lodsb			     ; draw 3rd	character
    175	022A  AB			     stosw			     ;
    176
    177	022B  C3			     ret
    178	022C				     endp
    179
    180				     ;-----------------------------------------------------------------------------
    181				     ;Draws a frame of characters in 9 byte string
    182				     ;Entry: DI	- memory address of the	1st character of the frame
    183				     ;	     AH	- color	attribute
    184				     ;	     BX	- frame	height
    185				     ;	     DX	- line width
    186				     ;	     SI	- memory address of 9 byte string
    187				     ;Exit:  DI	- memory address of the	1st character of the frame
    188				     ;	     DX	- frame	width
    189				     ;Destr: AL, BX, CX, SI, DI, BP
    190				     ;-----------------------------------------------------------------------------
    191	022C			     drawFrame	     proc
    192
    193	022C  8B EF			     mov bp, di			     ; save di for strings
    194
    195	022E  8B CA			     mov cx, dx			     ; draw 1st	line
    196	0230  E8 FFEE			     call cs:drawLine		     ;
    197
    198	0233  83 EB 02			     sub bx, 2
    199	0236			     @@Next:
    200					     SHIFT_TO_NEXT_LINE
1   201	0236  2B FA				     sub di, dx		     ; shift in	line
1   202	0238  2B FA				     sub di, dx		     ; di = di - 2*dx
1   203	023A  81 C7 00A0			     add di, 160	     ; jump on the next	line
    204
    205	023E  8B CA			     mov cx, dx			     ; revive width
    206
    207	0240  E8 FFDE			     call cs:drawLine
    208
    209	0243  83 EE 03			     sub si, 3			     ; return to 456 chars in str
    210	0246  4B			     dec bx			     ; height--
    211	0247  83 FB 00			     cmp bx, 0
    212	024A  77 EA			     ja	cs:@@Next
    213
    214					     SHIFT_TO_NEXT_LINE
1   215	024C  2B FA				     sub di, dx		     ; shift in	line
1   216	024E  2B FA				     sub di, dx		     ; di = di - 2*dx
1   217	0250  81 C7 00A0			     add di, 160	     ; jump on the next	line
    218
    219	0254  83 C6 03			     add si, 3			     ; *(si) = 7 (in 9 bytes str)
    220	0257  8B CA			     mov cx, dx			     ; revive width
    221
    222	0259  E8 FFC5			     call cs:drawLine
    223
    224	025C  8B FD			     mov di, bp			     ; revive di
    225
    226	025E  C3			     ret
    227	025F				     endp
    228
Turbo Assembler	 Version 4.1	    02/24/25 23:36:34	    Page 5
resident.asm



    229				     ;-----------------------------------------------------------------------------
    230				     ;Write registers' values in string	RegValues
    231				     ;Entry: SI	- address of the beginning of the string
    232				     ;Exit: None
    233				     ;Destr: SI, AX, DX, CX, BX
    234				     ;-----------------------------------------------------------------------------
    235	025F			     writeAllReg proc
    236	025F  B9 000C			 mov cx, REG_AMOUNT
    237	0262  8B DC			 mov bx, sp
    238	0264  83 C3 02			 add bx, 2
    239
    240	0267			     @@Next:
    241	0267  36: 8B 07			 mov ax, word ptr ss:[bx]
    242	026A  83 C6 03			 add si, 3
    243
    244	026D			     @@FirstDigit:
    245	026D  8B D0			 mov dx, ax
    246	026F  C1 EA 0C			 shr dx, 12
    247
    248	0272  80 FA 09			 cmp dl, 9
    249	0275  7F 0C			 jg cs:@@Hex1
    250
    251	0277  80 C2 30			 add dl, 30h
    252	027A  2E: 88 14			 mov byte ptr cs:[si], dl
    253	027D  46			 inc si
    254	027E  EB 0A 90 90 90		 jmp cs:@@SecondDigit
    255	0283			     @@Hex1:
    256	0283  80 C2 37			 add dl, 37h
    257	0286  2E: 88 14			 mov byte ptr cs:[si], dl
    258	0289  46			 inc si
    259
    260	028A			     @@SecondDigit:
    261	028A  8B D0			 mov dx, ax
    262	028C  C1 E2 04			 shl dx, 4
    263	028F  C1 EA 0C			 shr dx, 12
    264
    265	0292  80 FA 09			 cmp dl, 9
    266	0295  7F 0C			 jg cs:@@Hex2
    267
    268	0297  80 C2 30			 add dl, 30h
    269	029A  2E: 88 14			 mov byte ptr cs:[si], dl
    270	029D  46			 inc si
    271	029E  EB 0A 90 90 90		 jmp cs:@@ThirdDigit
    272	02A3			     @@Hex2:
    273	02A3  80 C2 37			 add dl, 37h
    274	02A6  2E: 88 14			 mov byte ptr cs:[si], dl
    275	02A9  46			 inc si
    276
    277	02AA			     @@ThirdDigit:
    278	02AA  8B D0			 mov dx, ax
    279	02AC  C1 E2 08			 shl dx, 8
    280	02AF  C1 EA 0C			 shr dx, 12
    281
    282	02B2  80 FA 09			 cmp dl, 9
    283	02B5  7F 0C			 jg cs:@@Hex3
    284
    285	02B7  80 C2 30			 add dl, 30h
Turbo Assembler	 Version 4.1	    02/24/25 23:36:34	    Page 6
resident.asm



    286	02BA  2E: 88 14			 mov byte ptr cs:[si], dl
    287	02BD  46			 inc si
    288	02BE  EB 0A 90 90 90		 jmp cs:@@FourthDigit
    289	02C3			     @@Hex3:
    290	02C3  80 C2 37			 add dl, 37h
    291	02C6  2E: 88 14			 mov byte ptr cs:[si], dl
    292	02C9  46			 inc si
    293
    294	02CA			     @@FourthDigit:
    295	02CA  8B D0			 mov dx, ax
    296	02CC  C1 E2 0C			 shl dx, 12
    297	02CF  C1 EA 0C			 shr dx, 12
    298
    299	02D2  80 FA 09			 cmp dl, 9
    300	02D5  7F 0B			 jg cs:@@Hex4
    301
    302	02D7  80 C2 30			 add dl, 30h
    303	02DA  2E: 88 14			 mov byte ptr cs:[si], dl
    304	02DD  EB 09 90 90 90		 jmp cs:@@DoneWriting
    305	02E2			     @@Hex4:
    306	02E2  80 C2 37			 add dl, 37h
    307	02E5  2E: 88 14			 mov byte ptr cs:[si], dl
    308
    309	02E8			     @@DoneWriting:
    310	02E8  83 C3 02			 add bx, 2
    311	02EB  83 C6 02			 add si, 2
    312	02EE  49			 dec cx
    313
    314	02EF  83 F9 00			 cmp cx, 0
    315	02F2  74 03			 je cs:@@Done
    316	02F4  E9 FF70			 jmp cs:@@Next
    317	02F7			     @@Done:
    318
    319	02F7  C3			 ret
    320	02F8				 endp
    321
    322				     ;-----------------------------------------------------------------------------
    323				     ;Prints RegValues in the frame
    324				     ;Entry: None
    325				     ;Exit: None
    326				     ;Destr:
    327				     ;-----------------------------------------------------------------------------
    328	02F8			     screenReg	 proc
    329	02F8  2E: 8B 3E	0117r		 mov di, cs:Y_coord		 ; y coord of the left-top corner of frame
    330	02FD  2E: 8B 16	0115r		     mov dx, cs:X_coord		     ; x coord
    331	0302  E8 FF0D			 call cs:firstCharAddr
    332
    333	0305  81 C7 0144		 add di, 324
    334	0309  B4 07			 mov ah, 00000111b	 ; black back, white front
    335	030B  BE 0119r			 mov si, offset	cs:RegValues
    336	030E  BA 0007			 mov dx, 7
    337	0311  BD 000C			 mov bp, REG_AMOUNT
    338
    339	0314			     @@Next:
    340	0314  8B CA			 mov cx, dx
    341	0316			     @@Loop:
    342	0316  AC			 lodsb
Turbo Assembler	 Version 4.1	    02/24/25 23:36:34	    Page 7
resident.asm



    343	0317  AB			 stosw
    344
    345	0318  E2 FC			 loop cs:@@Loop
    346	031A  46			 inc si
    347
    348					 SHIFT_TO_NEXT_LINE
1   349	031B  2B FA				     sub di, dx		     ; shift in	line
1   350	031D  2B FA				     sub di, dx		     ; di = di - 2*dx
1   351	031F  81 C7 00A0			     add di, 160	     ; jump on the next	line
    352
    353	0323  4D			 dec bp
    354	0324  83 FD 00			 cmp bp, 0
    355	0327  75 EB			 jne cs:@@Next
    356
    357	0329  C3			 ret
    358	032A				 endp
    359
    360
    361	032A			     EndOfResident:
    362
    363	032A			     Load:
    364	032A  B8 3509			     mov ax, 3509h		     ; get old 09h interrupt
    365	032D  CD 21			     int 21h			     ; handler in es:bx
    366
    367	032F  89 1E 0108r		     mov word ptr Old09Handler,	bx	     ; save old	09h offset
    368	0333  8C 06 010Ar		     mov word ptr Old09HAndler + 2, es	     ; save old	09h segment
    369
    370	0337  B8 2509			     mov ax, 2509h			     ; set new 09h interrupt
    371	033A  BA 0178r			     mov dx, offset checkKeys		     ; handler address
    372	033D  CD 21			     int 21h				     ;
    373
    374	033F  B8 3508			     mov ax, 3508h			     ; get old 08h interrupt
    375	0342  CD 21			     int 21h				     ; handler addr in es:bx
    376
    377	0344  89 1E 0104r		     mov word ptr Old08Handler,	bx	     ; save old	08h offset
    378	0348  8C 06 0106r		     mov word ptr Old08Handler + 2, es	     ; save old	08h segment
    379
    380	034C  B8 2508			     mov ax, 2508h			     ; set new 08h interrup
    381	034F  BA 01B8r			     mov dx, offset draw		     ; handler address
    382	0352  CD 21			     int 21h				     ;
    383
    384	0354  B8 3100			     mov ax, 3100h			     ;
    385	0357  BA 032Ar			     mov dx, offset EndOfResident	     ; dx = &EndOfResident
    386	035A  C1 EA 04			     shr dx, 4				     ; count in	paragraphs
    387	035D  42			     inc dx				     ;
    388	035E  CD 21			     int 21h				     ; save and	stay resident
    389
    390				     end     Start
Turbo Assembler	 Version 4.1	    02/24/25 23:36:34	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/24/25"
??FILENAME			  Text	 "resident"
??TIME				  Text	 "23:36:34"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@DONE				  Near	 DGROUP:02F7
@@DONEWRITING			  Near	 DGROUP:02E8
@@FIRSTDIGIT			  Near	 DGROUP:026D
@@FOURTHDIGIT			  Near	 DGROUP:02CA
@@HEX1				  Near	 DGROUP:0283
@@HEX2				  Near	 DGROUP:02A3
@@HEX3				  Near	 DGROUP:02C3
@@HEX4				  Near	 DGROUP:02E2
@@LOOP				  Near	 DGROUP:0316
@@NEXT				  Near	 DGROUP:0236
@@NEXT				  Near	 DGROUP:0267
@@NEXT				  Near	 DGROUP:0314
@@SECONDDIGIT			  Near	 DGROUP:028A
@@THIRDDIGIT			  Near	 DGROUP:02AA
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RESIDENT
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ACTIVATEFLAG			  Byte	 DGROUP:0103
CHECKKEYS			  Near	 DGROUP:0178
DRAW				  Near	 DGROUP:01B8
DRAWFRAME			  Near	 DGROUP:022C
DRAWLINE			  Near	 DGROUP:0221
ENDOFRESIDENT			  Near	 DGROUP:032A
FIRSTCHARADDR			  Near	 DGROUP:0212
HOT_KEY				  Number 0021
LOAD				  Near	 DGROUP:032A
OLD08HANDLER			  Dword	 DGROUP:0104
OLD09HANDLER			  Dword	 DGROUP:0108
REGVALUES			  Byte	 DGROUP:0119
REG_AMOUNT			  Number 000C
SCREENREG			  Near	 DGROUP:02F8
SKIPACTIVATE			  Near	 DGROUP:01AF
SKIPDRAW			  Near	 DGROUP:0200
START				  Near	 DGROUP:0100
STYLE				  Byte	 DGROUP:010C
VIDEOSEG			  Number B800
WRITEALLREG			  Near	 DGROUP:025F
X_COORD				  Word	 DGROUP:0115
Y_COORD				  Word	 DGROUP:0117
Turbo Assembler	 Version 4.1	    02/24/25 23:36:34	    Page 9
Symbol Table




Macro Name

SHIFT_TO_NEXT_LINE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0360 Word	  Public  CODE
